import Head from 'next/head';
import Image from 'next/image';
import Layout from './../components/Layout';
import PrimaryButtonArrow from '../components/PrimaryButtonArrow';
import SecondaryButton from '../components/SecondaryButton';

import { data } from '../data';
import { promises as fs } from 'fs';
import path from 'path';

import { arrToObject, useWindowSize } from './../lib/lib';

// import img from '../public/images/homepage/mobile/image-homepage-hero.jpg';

import _ from 'lodash';
import Link from 'next/link';
import { useCallback, useEffect, useState } from 'react';

export default function Home({ images }) {
  const [homePage] = data.pages.filter((page) => page.name === 'home');
  const { name: pageName, intro, opening } = homePage;

  const { mobile, tablet, desktop } = arrToObject(images);
  // console.log('mobile', mobile);
  // console.log('tablet', tablet);
  // console.log('desktop', desktop);

  const { width } = useWindowSize();

  const [windowWidth, setWindowWidth] = useState();

  const getImageByDevice = (imageType, layout = 'intrinsic') => {
    let {
      src: currentSrc,
      width: currentWidth,
      height: currentHeight,
    } = getImageParams('mobile', imageType);
    // let layout = '';
    if (windowWidth > 425 && windowWidth <= 640) {
      imageType = `${imageType}@2x`;

      const { src, width, height } = getImageParams('mobile', imageType);
      currentSrc = src;
      currentWidth = width;
      currentHeight = height;
    }

    if (windowWidth > 640 && windowWidth <= 768) {
      const { src, width, height } = getImageParams('tablet', imageType);
      currentSrc = src;
      currentWidth = width;
      currentHeight = height;
    }

    if (windowWidth > 768 && windowWidth <= 1024) {
      imageType = `${imageType}@2x`;
      const { src, width, height } = getImageParams('tablet', imageType);
      currentSrc = src;
      currentWidth = width;
      currentHeight = height;
    }

    if (windowWidth > 1024 && windowWidth <= 1440) {
      const { src, width, height } = getImageParams('desktop', imageType);
      currentSrc = src;
      currentWidth = width;
      currentHeight = height;
    }
    if (windowWidth > 1440) {
      imageType = `${imageType}@2x`;

      const { src, width, height } = getImageParams('desktop', imageType);
      currentSrc = src;
      currentWidth = width;
      currentHeight = height;
    }
    if (layout === 'fill')
      return (
        <Image
          src={currentSrc}
          alt={mobile[imageType].filenameShort}
          layout={layout}
          objectFit='cover'
        ></Image>
      );
    return (
      <Image
        src={currentSrc}
        width={currentWidth}
        height={currentHeight}
        alt={mobile[imageType].filenameShort}
        layout={layout}
      ></Image>
    );
  };

  const getImageParams = (device, imageType) => {
    if (device === 'mobile')
      return {
        src: mobile[imageType].imageRelativePath,
        width: mobile[imageType].dimensions.width,
        height: mobile[imageType].dimensions.height,
      };
    if (device === 'tablet')
      return {
        src: tablet[imageType].imageRelativePath,
        width: tablet[imageType].dimensions.width,
        height: tablet[imageType].dimensions.height,
      };
    if (device === 'desktop')
      return {
        src: desktop[imageType].imageRelativePath,
        width: desktop[imageType].dimensions.width,
        height: desktop[imageType].dimensions.height,
      };
  };

  useEffect(() => {
    setWindowWidth(width);
  }, [width]);

  return (
    <>
      <Head>
        <title>{pageName}</title>
        <meta name='description' content='Generated by create next app' />
      </Head>
      <Layout>
        <div className='sm:relative '>
          <section className='mt-10 mb-6 '>
            {getImageByDevice('hero', 'responsive')}
          </section>

          <div className='bg-secondary-gray-light md:absolute  md:left-0 md:bottom-0 md:pr-8 pt-10'>
            <div className='md:w-96'>
              <h1 className='font-ibarra font-bold text-4xl md:min-w-full'>
                {opening}
              </h1>
            </div>
            <PrimaryButtonArrow href='#about-me' btnText='about me' />
          </div>
        </div>
        {/* /***** */}
        {/* profile image */}
        <section className='pt-12 laptop-sm:flex'>
          <div className='laptop-sm:w-5/12 lg:relative'>
            {(windowWidth < 1025 &&
              getImageByDevice('profile', 'responsive')) ||
              getImageByDevice('profile', 'fill', 'object-contain')}
          </div>
          <div className='laptop-sm:w-7/12  laptop-sm:pl-12 h-100'>
            <article
              id='about-me'
              className='border-b border-t  border-secondary-gray mt-7 laptop-sm:mt-0 py-8 laptop-sm:min-h-full laptop'
            >
              <h1 className='text-4xl capitalize font-ibarra font-bold'>
                about me
              </h1>
              <p className='py-6 text-base lg: 2xl:text-xl max-w-prose font-public font-normal opacity-80'>
                {intro}
              </p>
              <Link href='/portfolio' passHref>
                <SecondaryButton btnText='go to portfolio' />
              </Link>
            </article>
          </div>
        </section>
      </Layout>
    </>
  );
}

export async function getStaticProps() {
  //Get all images for this page for all devices in the devices array
  const sizeOf = require('image-size');
  const devices = ['mobile', 'tablet', 'desktop'];

  const allDevicesImages = devices.map(async (device) => {
    const homepageDirectory = path.join(
      process.cwd(),
      `public/images/homepage/${device}`
    );
    const filenames = await fs.readdir(homepageDirectory, 'utf8');

    const imageData = filenames.map(async (filename) => {
      const filePath = path.join(homepageDirectory, filename);
      const dimensions = await sizeOf(filePath);

      const imageRelativeDir = /\\images.*/gi
        .exec(homepageDirectory)
        .join()
        .replace(/\\/g, '/');

      const imageRelativePath = `${imageRelativeDir}/${filename}`;
      const filenameShort = filename.match(/\w+@?\w+(?=\.)/gi).join();

      return {
        filename,
        imageRelativePath,
        dimensions,
        filenameShort,
      };
    });

    return {
      [device]: await Promise.all(imageData),
      device,
    };
  });

  return {
    props: {
      images: await Promise.all(allDevicesImages),
    },
  };
}
